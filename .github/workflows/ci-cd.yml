name: CI/CD Pipeline
on:
  push:
    branches: [main]
    tags: ["v*.*.*"] # Matches semantic version tags like v0.0.1
  pull_request:
    branches: [main]
env:
  IMAGE_NAME: thienhaole92/auto-go-app
  GO_VERSION: "1.23.11"
  DOCKER_BUILDX_VERSION: latest
  DOCKER_BUILDX_DRIVER: docker-container
jobs:
  lint:
    name: Lint and Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Run make lint
        run: make lint
  test:
    name: Run Tests
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Run tests
        run: make test-go
  build-and-push:
    name: Build and Push Docker Image
    outputs:
      short_sha_tag: ${{ steps.tags.outputs.short_sha_tag }}
      version_tag: ${{ steps.tags.outputs.version_tag }}
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: ${{ env.DOCKER_BUILDX_VERSION }}
          driver: ${{ env.DOCKER_BUILDX_DRIVER }}
          platforms: linux/amd64,linux/arm64 # Multi-architecture support
          install: true
      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Get short Git commit SHA
        id: vars
        run: echo "COMMIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: Determine tags
        id: tags
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            version=${GITHUB_REF#refs/tags/v}
            echo "version_tag=$version" >> $GITHUB_OUTPUT
            echo "tags=$IMAGE_NAME:$version,$IMAGE_NAME:latest" >> $GITHUB_OUTPUT
          else
            echo "short_sha_tag=$COMMIT_SHA" >> $GITHUB_OUTPUT
            echo "tags=$IMAGE_NAME:$COMMIT_SHA" >> $GITHUB_OUTPUT
          fi
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          COMMIT_SHA: ${{ env.COMMIT_SHA }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
          tags: ${{ steps.tags.outputs.tags }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            COMMIT_SHA=${{ env.COMMIT_SHA }}
  deploy-development:
    name: Deploy App (Development)
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEVELOPMENT_DEPLOY_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 400 ~/.ssh/id_ed25519
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_ed25519
      - name: Add host to known_hosts
        run: |
          ssh-keyscan -t rsa,ed25519 ${{ vars.DEVELOPMENT_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
      - name: Update .env on server
        run: |
          TAG="${{ needs.build-and-push.outputs.short_sha_tag || 'latest' }}"
          ssh ${{ vars.DEPLOY_USER }}@${{ vars.DEVELOPMENT_HOST }} \
            "sed -i 's/^AUTO_GO_APP_VERSION=.*/AUTO_GO_APP_VERSION=$TAG/g' /opt/docker/.env"
      - name: Show updated .env
        run: ssh ${{ vars.DEPLOY_USER }}@${{ vars.DEVELOPMENT_HOST }} cat /opt/docker/.env
      - name: Restart service via Docker Compose
        run: |
          ssh ${{ vars.DEPLOY_USER }}@${{ vars.DEVELOPMENT_HOST }} \
            "cd /opt/docker/ && sudo docker compose up -d --force-recreate auto-go-app" || exit 0
  notify-ansible-deployment:
    name: Ansible Deploy App (Development)
    needs: deploy-development
    runs-on: ubuntu-latest
    steps:
      - name: "Check commit eligibility"
        if: github.ref == 'refs/heads/main'
        run: echo "This commit is eligible for dev deployment"
      - name: "Send deployment request"
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WORKFLOW_PAT }}
          script: |
            await github.rest.repos.createDispatchEvent({
              owner: "thienhaole92",
              repo: "auto-go-release-pipeline",
              event_type: "trigger-dev-deploy",
              client_payload: {
                sha: "${{ github.sha }}",
                triggered_by: "${{ github.actor }}"
              }
            });
            console.log("ðŸ“¢ Successfully requested dev deployment!");
